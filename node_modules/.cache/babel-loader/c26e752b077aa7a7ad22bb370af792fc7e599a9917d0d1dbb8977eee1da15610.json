{"ast":null,"code":"// This could be in a separate file, e.g., particles.js\n/*export function setupParticles(canvas) {\n    if (!canvas) {\n        console.error('Canvas element not found');\n        return;\n    }\n\n    const ctx = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n  \n    const particles = [];\n  \n    class Particle {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.size = Math.random() * 3.4 + 1;\n        this.speedX = Math.random() * 2.5 - 0.25;\n        this.speedY = Math.random() * 2.5 - 1.25;\n        this.color = getRandomNeonColor();\n      }\n  \n      update() {\n        this.x += this.speedX;\n        this.y += this.speedY;\n  \n        if (this.x > canvas.width) this.x = 0;\n        else if (this.x < 0) this.x = canvas.width;\n        if (this.y > canvas.height) this.y = 0;\n        else if (this.y < 0) this.y = canvas.height;\n      }\n  \n      draw() {\n        ctx.save(); // Save the current context state\n\n        // Set glow effect\n        ctx.shadowBlur = 15;\n        ctx.shadowColor = this.color;\n\n        // Draw the particle\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fillStyle = this.color;\n        ctx.fill();\n\n        ctx.restore(); // Restore the context state\n      }\n    }\n  \n    function init() {\n      for (let i = 0; i < 40; i++) {\n        particles.push(new Particle());\n      }\n    }\n  \n    function animate() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      particles.forEach(particle => {\n        particle.update();\n        particle.draw();\n      });\n      requestAnimationFrame(animate);\n    }\n  \n    function resizeCanvas() {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    }\n  \n    init();\n    animate();\n  \n    window.addEventListener('resize', resizeCanvas);\n  \n    console.log('Particles setup complete'); // Add this line for debugging\n  \n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n    };\n  }\n  \n  function getRandomNeonColor() {\n    const neonColors = ['#ff00ff', '#ff9900', '#ff0066', '#3300ff'];\n    return neonColors[Math.floor(Math.random() * neonColors.length)];\n  }\n  \n  // Call this function when your component mounts\n  setupParticles();\n  setupParticles();*/","map":{"version":3,"names":[],"sources":["/Users/BerkanTugsuz/Documents/Github/Repute/frontend/src/particles.js"],"sourcesContent":["// This could be in a separate file, e.g., particles.js\n/*export function setupParticles(canvas) {\n    if (!canvas) {\n        console.error('Canvas element not found');\n        return;\n    }\n\n    const ctx = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n  \n    const particles = [];\n  \n    class Particle {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.size = Math.random() * 3.4 + 1;\n        this.speedX = Math.random() * 2.5 - 0.25;\n        this.speedY = Math.random() * 2.5 - 1.25;\n        this.color = getRandomNeonColor();\n      }\n  \n      update() {\n        this.x += this.speedX;\n        this.y += this.speedY;\n  \n        if (this.x > canvas.width) this.x = 0;\n        else if (this.x < 0) this.x = canvas.width;\n        if (this.y > canvas.height) this.y = 0;\n        else if (this.y < 0) this.y = canvas.height;\n      }\n  \n      draw() {\n        ctx.save(); // Save the current context state\n\n        // Set glow effect\n        ctx.shadowBlur = 15;\n        ctx.shadowColor = this.color;\n\n        // Draw the particle\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fillStyle = this.color;\n        ctx.fill();\n\n        ctx.restore(); // Restore the context state\n      }\n    }\n  \n    function init() {\n      for (let i = 0; i < 40; i++) {\n        particles.push(new Particle());\n      }\n    }\n  \n    function animate() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      particles.forEach(particle => {\n        particle.update();\n        particle.draw();\n      });\n      requestAnimationFrame(animate);\n    }\n  \n    function resizeCanvas() {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    }\n  \n    init();\n    animate();\n  \n    window.addEventListener('resize', resizeCanvas);\n  \n    console.log('Particles setup complete'); // Add this line for debugging\n  \n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n    };\n  }\n  \n  function getRandomNeonColor() {\n    const neonColors = ['#ff00ff', '#ff9900', '#ff0066', '#3300ff'];\n    return neonColors[Math.floor(Math.random() * neonColors.length)];\n  }\n  \n  // Call this function when your component mounts\n  setupParticles();\n  setupParticles();*/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}